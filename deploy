#!/usr/bin/env ruby

require 'aws-sdk'
AWS.config access_key_id: ENV['S3_ACCESS_ID'], secret_access_key: ENV['S3_SECRET_KEY']
s3 = AWS::S3.new
bucket = s3.buckets['zooniverse-demo']
path = 'sunspots'

working_directory = File.expand_path Dir.pwd

system 'haw build'
Dir.chdir 'build'
app_js = Dir['main*.js'].first
app_css = Dir['main*.css'].first

system <<-BASH
echo 'Compressing...'

../node_modules/clean-css/bin/cleancss #{ app_css } -o #{ app_css }
gzip -9 -c #{ app_js } > app.js
mv app.js #{ app_js }
gzip -9 -c #{ app_css } > app.css
mv app.css #{ app_css }
BASH

index = File.read 'index.html'
index.gsub! 'main.js', app_js
index.gsub! 'main.css', app_css
File.open('index.html', 'w'){ |f| f.puts index }

to_upload = []

if ARGV[0] == 'quick'
  %w(js css html).each{ |ext| to_upload << Dir["**/*.#{ ext }*"] }
  to_upload.flatten!
else
  to_upload = Dir['**/*'].reject{ |path| File.directory? path }
end

to_upload.delete 'index.html'
total = to_upload.length

to_upload.each.with_index do |file, index|
  content_type = case File.extname(file)
  when '.html'
    'text/html'
  when '.js'
    'application/javascript'
  when '.css'
    'text/css'
  when '.gz'
    'application/x-gzip'
  when '.ico'
    'image/x-ico'
  when '.eot'
    'application/vnd.ms-fontobject'
  when '.ttf'
    'font/ttf'
  when '.woff'
    'font/x-woff'
  when '.webm'
    'video/webm'
  when '.ogv'
    'video/ogg'
  else
    `file --mime-type -b #{ file }`.chomp
  end
  
  remote_path = [path, file].compact.join '/'
  puts "#{ '%2d' % (index + 1) } / #{ '%2d' % total }: Uploading #{ remote_path } as #{ content_type }"
  options = { file: file, acl: :public_read, content_type: content_type }
  
  if content_type == 'application/javascript' || content_type == 'text/css'
    options[:content_encoding] = 'gzip'
  end
  
  bucket.objects[remote_path].write options
end

bucket.objects[[path, 'index.html'].compact.join('/')].write file: 'index.html', acl: :public_read, content_type: 'text/html', cache_control: 'no-cache, must-revalidate'

Dir.chdir working_directory
`rm -rf build`
puts 'Done!'
