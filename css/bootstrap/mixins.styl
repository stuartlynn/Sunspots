//
// Mixins
// --------------------------------------------------


// Stylus Extras
// --------------------------------------------------

// Non supported LESS functions
percentage(n1, n2)
  unit((n1/n2)*100, "%")

// Utilities
// -------------------------

// Clearfix
// Source: http://nicolasgallagher.com/micro-clearfix-hack/
//
// For modern browsers
// 1. The space content is one way to avoid an Opera bug when the
//    contenteditable attribute is included anywhere else in the document.
//    Otherwise it causes space to appear at the top and bottom of elements
//    that are clearfixed.
// 2. The use of `table` rather than `block` is only necessary if using
//    `:before` to contain the top-margins of child elements.
clearfix() {
  &:before,
  &:after {
    content: " "; /* 1 */
    display: table; /* 2 */
  }
  &:after {
    clear: both;
  }
}

// Center-align a block level element
center-block() {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

// Retina images
//
// Short retina mixin for setting background-image and -size

img-retina(file-1x, file-2x, width-1x, height-1x)
  background-image: url(file-1x);

  @media only screen and ( -webkit-min-device-pixel-ratio: 2), only screen and ( min--moz-device-pixel-ratio: 2), only screen and ( -o-min-device-pixel-ratio: 2/1), only screen and ( min-device-pixel-ratio: 2), only screen and ( min-resolution: 192dpi), only screen and ( min-resolution: 2dppx)
    background-image: url(file-2x);
    background-size: width-1x height-1x;

// Responsive image
//
// Keep images from scaling beyond the width of their parents.

img-responsive(display = block) {
  display: display;
  max-width: 100%; // Part 1: Set a maximum relative to the parent
  height: auto; // Part 2: Scale the height according to the width, otherwise you get stretching
}

// Responsive utilities
// -------------------------
// More easily include all the states for responsive-utilities.less.
responsive-visibility() {
  display: block !important;
  tr& { display: table-row !important; }
  th&,
  td& { display: table-cell !important; }
}

responsive-invisibility() {
  display: none !important;
  tr& { display: none !important; }
  th&,
  td& { display: none !important; }
}

// Grid System
// -----------

// Centered container element
container-fixed() {
  margin-right: auto;
  margin-left: auto;
  padding-left:  ($grid-gutter-width / 2);
  padding-right: ($grid-gutter-width / 2);
  clearfix();
}

// Creates a wrapper for a series of columns
make-row(gutter = $grid-gutter-width) {
  margin-left:  (gutter / -2);
  margin-right: (gutter / -2);
  clearfix();
}

// Generate the extra small columns
make-xs-column(columns, gutter = $grid-gutter-width) {
  position: relative;
  float: left;
  width: percentage(columns, $grid-columns)
  // Prevent columns from collapsing when empty
  min-height: 1px;
  // Inner gutter via padding
  padding-left:  (gutter / 2);
  padding-right: (gutter / 2);
}

// Generate the small columns
make-sm-column(columns, gutter = $grid-gutter-width) {
  position: relative;
  // Prevent columns from collapsing when empty
  min-height: 1px;
  // Inner gutter via padding
  padding-left:  (gutter / 2);
  padding-right: (gutter / 2);

  // Calculate width based on number of columns available
  @media $media-min-tablet {
    float: left;
    width: percentage(columns, $grid-columns);
  }
}

// Generate the small column offsets
make-sm-column-offset(columns) {
  @media $media-min-tablet {
    margin-left: percentage(columns, $grid-columns);
  }
}
make-sm-column-push(columns) {
  media $media-min-tablet {
    left: percentage(columns, $grid-columns);
  }
}
make-sm-column-pull(columns) {
  media $media-min-tablet {
    right: percentage(columns, $grid-columns);
  }
}

// Generate the medium columns
make-md-column(columns, gutter = $grid-gutter-width) {
  position: relative;
  // Prevent columns from collapsing when empty
  min-height: 1px;
  // Inner gutter via padding
  padding-left:  (gutter / 2);
  padding-right: (gutter / 2);

  // Calculate width based on number of columns available
  @media $media-min-lg-desktop {
    float: left;
    width: percentage(columns, $grid-columns);
  }
}

// Generate the large column offsets
make-md-column-offset(columns) {
  @media $media-min-lg-desktop {
    margin-left: percentage(columns, $grid-columns);
  }
}
make-md-column-push(columns) {
  @media $media-min-lg-desktop {
    left: percentage(columns, $grid-columns);
  }
}
make-md-column-pull(columns) {
  @media $media-min-lg-desktop {
    right: percentage(columns, $grid-columns);
  }
}

// Generate the large columns
make-lg-column(columns, gutter = $grid-gutter-width) {
  position: relative;
  // Prevent columns from collapsing when empty
  min-height: 1px;
  // Inner gutter via padding
  padding-left:  (gutter / 2);
  padding-right: (gutter / 2);

  // Calculate width based on number of columns available
  @media $media-min-lg-desktop {
    float: left;
    width: percentage(columns, $grid-columns);
  }
}

// Generate the large column offsets
make-lg-column-offset(columns) {
  @media $media-min-lg-desktop {
    margin-left: percentage(columns, $grid-columns);
  }
}
make-lg-column-push(columns) {
  @media $media-min-lg-desktop {
    left: percentage(columns, $grid-columns);
  }
}
make-lg-column-pull(columns) {
  @media $media-min-lg-desktop {
    right: percentage(columns, $grid-columns);
  }
}
